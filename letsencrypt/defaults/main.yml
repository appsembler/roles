---

# Pin to prevent unintentional updates (more in letsencrypt/README.md)

# Note: The trailing `-*` is to match the rather verbose package
#       versions in Debian e.g. `0.22.2-1+ubuntu16.04.1+certbot+1`
letsencrypt_package: "certbot={{ letsencrypt_version }}-*"
letsencrypt_version: "0.31.0-1+ubuntu16.04.1+certbot+1"

letsencrypt_command: "certbot"
letsencrypt_certbot_plugin: "webroot"
letsencrypt_webroot: "/var/www/letsencrypt"
letsencrypt_webroot_parent: "/var/www"
letsencrypt_logfile: "/var/log/letsencrypt/letsencrypt.log"
letsencrypt_alternative_acme_folder: ""
letsencrypt_webuser: "www-data"
letsencrypt_webserver: "nginx"
letsencrypt_webserver_config: "nginx/letsencrypt"
letsencrypt_webserver_sites_available: "/etc/nginx/sites-available"
letsencrypt_webserver_sites_enabled: "/etc/nginx/sites-enabled"
letsencrypt_https_redirect: false
letsencrypt_email: !!null
letsencrypt_certs: []
letsencrypt_single_cert: ""
letsencrypt_execute_for_single_domain: false
letsencrypt_flags: ""
letsencrypt_run: true
letsencrypt_enable_default_server: false

# This must be a list of hashes, where each hash represents a single certificate
# letsencrypt_certs:
#   - domains: ["foo.example.com", "bar.example.com"]
#   - domains: ["baz.example.com"]

# enables a cronjob that deletes old keys/csr files
# those files are small and in 99.9% of deployments
# will not consume enough disk space to be worth worrying about.
# For very special cases like Tahoe, using a network filesystem
# the per-file cost is high enough that we need to clean up
# occasionally.
letsencrypt_cleanup_enable: false
letsencrypt_cleanup_days: 180
